//@version=6
strategy("Grid Trading Strategy KR",
         shorttitle="Grid KR",
         overlay=true,
         commission_value=0.05, // 거래 수수료 (%) - 업비트 기준 0.05%
         commission_type=strategy.commission.percent,
         initial_capital=1000000, // 초기 자본금 (KRW) - 필요에 따라 조절
         default_qty_type=strategy.cash, // 주문 수량 타입 (현금 기준)
         // default_qty_value는 orderAmountKRW 입력값으로 대체되므로 여기서는 큰 의미 없음
         calc_on_order_fills=true // 주문 체결 시 스크립트 재계산 활성화
         )

// --- 입력 변수 ---
basePriceInput = input.float(title="기준 가격 (Base Price)", defval=12000.0, group="그리드 설정")
priceChangeInput = input.float(title="그리드 간격 (Price Change per Grid)", defval=100.0, group="그리드 설정")
maxGridCountInput = input.int(title="최대 그리드 수 (Max Grid Levels)", defval=100, minval=1, maxval=100, group="그리드 설정")
orderAmountKRW = input.float(title="주문당 금액 (Order Amount KRW)", defval=10000.0, group="주문 설정", tooltip="각 매수 주문에 사용할 원화 금액입니다.")

// --- 전역 변수 선언 ---
var float[] buyLevels = array.new_float(0)      // 매수 목표가 배열
var float[] sellLevels = array.new_float(0)     // 매도 목표가 배열
var bool[] isPositionOpen = array.new_bool(0)   // 각 그리드 레벨의 포지션 보유 여부
var float[] entryPrices = array.new_float(0)    // 각 그리드 레벨의 진입 가격
var float[] positionQtys = array.new_float(0)   // 각 그리드 레벨의 보유 수량

// --- 그리드 초기화 함수 ---
initGrids() =>
    array.clear(buyLevels)
    array.clear(sellLevels)
    array.clear(isPositionOpen)
    array.clear(entryPrices)
    array.clear(positionQtys)

    for i = 0 to maxGridCountInput - 1
        currentBuyLevel = basePriceInput - (i * priceChangeInput)
        currentSellLevel = currentBuyLevel + priceChangeInput

        array.push(buyLevels, currentBuyLevel)
        array.push(sellLevels, currentSellLevel)
        array.push(isPositionOpen, false)
        array.push(entryPrices, na)
        array.push(positionQtys, na)

// --- 초기화 및 라인 그리기 ---
if barstate.isfirst
    initGrids()
    // 라인 플로팅 (차트에 그리드 시각화) - 전체 차트에 표시
    for i = 0 to maxGridCountInput - 1
        currentBuyLevel = basePriceInput - (i * priceChangeInput)
        currentSellLevel = currentBuyLevel + priceChangeInput
        line.new(bar_index, currentBuyLevel, bar_index + 1, currentBuyLevel, color=color.new(color.red, 70), style=line.style_dashed, extend=extend.both)
        line.new(bar_index, currentSellLevel, bar_index + 1, currentSellLevel, color=color.new(color.green, 70), style=line.style_dashed, extend=extend.both)

// --- 매매 로직 (barstate.isconfirmed는 봉 확정 시에만 실행하여 틱 단위 중복 실행 방지) ---
if barstate.isconfirmed and array.size(buyLevels) > 0 // 그리드가 초기화되었는지 확인

    // 단계 1: 현재 열린 포지션 상태를 내부 추적 배열과 동기화
    // calc_on_order_fills=true로 인해 주문 체결 후 이 로직이 실행되어 정확한 상태 반영
    for gridIdx = 0 to maxGridCountInput - 1
        trackedAsOpen = array.get(isPositionOpen, gridIdx)
        tradeIdForGrid = "GridBuy" + str.tostring(gridIdx)
        foundInOpenTradesThisBar = false

        for tradeIdx = 0 to strategy.opentrades - 1
            if strategy.opentrades.entry_id(tradeIdx) == tradeIdForGrid
                // 이 그리드 레벨의 포지션이 현재 열려 있음
                if not trackedAsOpen // 내부 추적 상태가 '닫힘'이었으나 실제로는 '열림' 상태일 때 업데이트
                    array.set(isPositionOpen, gridIdx, true)
                array.set(entryPrices, gridIdx, strategy.opentrades.entry_price(tradeIdx))
                array.set(positionQtys, gridIdx, strategy.opentrades.size(tradeIdx))
                foundInOpenTradesThisBar := true
                break // 해당 그리드 ID 찾음

        if trackedAsOpen and not foundInOpenTradesThisBar
            // 내부 추적 상태는 '열림'이었으나, 실제 열린 포지션 목록에 없음 -> 청산된 것
            array.set(isPositionOpen, gridIdx, false)
            array.set(entryPrices, gridIdx, na)
            array.set(positionQtys, gridIdx, na)

    // 단계 2: 동기화된 상태를 기반으로 새로운 매수 또는 매도 주문 실행
    for i = 0 to maxGridCountInput - 1
        if i < array.size(buyLevels) and i < array.size(sellLevels) // 배열 범위 체크
            buyTargetPrice = array.get(buyLevels, i)
            sellTargetPrice = array.get(sellLevels, i)
            isCurrentlyOpenAtLevel = array.get(isPositionOpen, i) // 동기화된 최신 상태 사용

            // 주문 수량은 목표 매수가 기준으로 계산 (가격 변동에 따른 수량 변화 최소화)
            qtyToTrade = orderAmountKRW / buyTargetPrice 
            
            // 유효하지 않은 수량 처리 개선
            if qtyToTrade <= 0 or na(qtyToTrade)
                qtyToTrade := orderAmountKRW / close // 현재가 기준으로 최소 수량 계산
                if qtyToTrade <= 0
                    qtyToTrade := 0.001 // 최소 거래 수량 설정

            // 매수 조건: 해당 레벨에 포지션이 없고, 현재 가격이 매수 목표가 이하인 경우
            if not isCurrentlyOpenAtLevel and close <= buyTargetPrice and qtyToTrade > 0
                strategy.entry(id="GridBuy"+str.tostring(i), direction=strategy.long, qty=qtyToTrade, limit=buyTargetPrice)
                alert("그리드 매수 주문 시도: 레벨 " + str.tostring(i+1) + ", 목표가: " + str.tostring(buyTargetPrice) + ", 예상수량: " + str.tostring(qtyToTrade), alert.freq_once_per_bar_close)

            // 매도 조건: 해당 레벨에 포지션이 있고, 현재 가격이 매도 목표가 이상인 경우
            else if isCurrentlyOpenAtLevel and close >= sellTargetPrice
                qtyHeldAtLevel = array.get(positionQtys, i)
                if qtyHeldAtLevel > 0 and not na(qtyHeldAtLevel) // 유효한 보유 수량이 있는지 확인
                    strategy.close(id="GridBuy"+str.tostring(i), comment="GridSell"+str.tostring(i), qty=qtyHeldAtLevel)
                    alert("그리드 매도 주문 시도: 레벨 " + str.tostring(i+1) + ", 목표가: " + str.tostring(sellTargetPrice) + ", 매도수량: " + str.tostring(qtyHeldAtLevel), alert.freq_once_per_bar_close)

